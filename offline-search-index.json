




[{"body":"Prerequisites Consider redundancy If you lose access to your hardware security device (for example if it is lost, stolen, or broken) there is no way to recover the keys stored on it. For that reason it is highly recommended that you use fallback SSH or GPG keyfiles and/or multiple hardware security devices.\nInstall pcsclite piv-agent has transitive dependencies through piv-go, on pcsclite.\n# debian / ubuntu sudo apt install libpcsclite1 # TODO: other platforms ... Install piv-agent Download the latest release, and extract it to a temporary location. Copy the piv-agent binary into your $PATH, and the systemd unit files to the correct location:\nsudo cp piv-agent /usr/local/bin/ cp deploy/piv-agent.{socket,service} ~/.config/systemd/user/ systemctl --user daemon-reload Socket activation piv-agent relies on socket activation, and is currently only tested with systemd. It doesn’t listen to any sockets directly, and instead requires the init system to pass file descriptors to the piv-agent process after it is running. This requirement makes it possible to exit the process when not in use.\nssh-agent and gpg-agent functionality are enabled by default in piv-agent.service and piv-agent.socket. The index of the sockets listed in piv-agent.socket are indicated by the arguments to --agent-types.\n","categories":"","description":"","excerpt":"Prerequisites Consider redundancy If you lose access to your hardware …","ref":"/piv-agent/docs/install/","tags":"","title":"Install"},{"body":"Hardware  WARNING\nThis procedure resets the state of the PIV applet and wipes any existing keys from PIV slots.\n This procedure is only required once per hardware security device. Performing it a second time will reset the keys on the PIV applet of the device. It will not make any changes to other functionality the device may have, such as WebAuthn.\nBy default, piv-agent uses three slots on your hardware security device to set up keys with different touch policies: never required, cached (for 15 seconds), and always.\n# find the name of the hardware security devices (cards) piv-agent list # generate new keys piv-agent setup --pin=123456 --card='Yubico YubiKey FIDO+CCID 01 00' --reset-security-key # view newly generated keys (SSH only by default) piv-agent list SSH List keys List your hardware SSH keys:\npiv-agent list Add the public SSH key with the touch policy you want from the list, to any SSH service.\nSet SSH_AUTH_SOCK Export the SSH_AUTH_SOCK variable in your shell.\nexport SSH_AUTH_SOCK=$XDG_RUNTIME_DIR/piv-agent/ssh.socket Prefer keys on the hardware security device If you don’t already have one, it’s a good idea to generate an ed25519 keyfile and add that to all SSH services too for redundancy. piv-agent will automatically load and use ~/.ssh/id_ed25519 as a fallback.\nBy default, ssh will offer keyfiles it finds on disk before those from the agent. This is a problem because piv-agent is designed to offer keys from the hardware token first, and only fall back to local keyfiles if token keys are refused. To get ssh to ignore local keyfiles and only talk to piv-agent, add this line to your ssh_config, for all hosts:\nIdentityFile /dev/null GPG Import public keys gpg requires public keys to be imported for any private keys stored by the agent. This structure of a GPG public key contains a User ID packet, which must be signed by the associated private key.\nThe piv-agent list command can synthesize a public key for the private key stored on the security hardware device. Listing a GPG key via piv-agent list --key-formats=gpg will require a touch to perform signing on the keys associated with those slots (due to the User ID packet). You should provide a name and email which will be embedded in the synthesized public key (see piv-agent --help list).\npiv-agent list --key-formats=ssh,gpg --pgp-name='Art Vandelay' --pgp-email='art@example.com' Paste these public keys into a key.asc file, and run gpg --import key.asc.\nExport fallback keys Private GPG keys to be used by piv-agent must be exported to the directory~/.gnupg/piv-agent.secring/.\n NOTE\nThis step requires gpg-agent to be running, not piv-agent.\n # set umask for user-only permissions umask 77 mkdir -p ~/.gnupg/piv-agent.secring gpg --export-secret-key 0xB346A434C7652C02 \u003e ~/.gnupg/piv-agent.secring/art@example.com.gpg Disable gpg-agent It is not possible to set a custom path for the gpg-agent socket in a similar manner to ssh-agent. Instead gpg-agent always uses a hard-coded path for its socket. In order for piv-agent to work with gpg, it sets up a socket in this same default location. To avoid conflict over this path, gpg-agent should be disabled.\nThis is how you can disable gpg-agent on Debian/Ubuntu:\n Add no-autostart to ~/.gnupg/gpg.conf. systemctl --user disable --now gpg-agent.socket gpg-agent.service; pkill gpg-agent  Other platforms may have slightly different instructions - PRs welcome.\n","categories":"","description":"","excerpt":"Hardware  WARNING\nThis procedure resets the state of the PIV applet …","ref":"/piv-agent/docs/setup/","tags":"","title":"Setup"},{"body":"Start piv-agent.socket Start the agent sockets, and test:\nsystemctl --user enable --now piv-agent.socket ssh-add -l gpg -K This should be enough to allow you to use piv-agent.\nAdvanced This section describes some ways to enhance the usability of piv-agent.\nPIN / Passphrase caching If your pinentry supports caching credentials, piv-agent will offer to cache the PIN of the hardware security device. It will not cache the passphrase of any fallback keys.\nThis is a usability/security tradeoff that ensures that at least the encrypted private key file and its passphrase aren’t stored together on disk. It also has the advantage of ensuring that you don’t forget your keyfile passphrase, as you’ll need to enter it periodically.\nHowever you might also forget your device PIN, so maybe don’t cache that either if you’re concerned about that possibility.\nAdd hardware key as a OpenPGP signing subkey  NOTE\nThere is a bug in certain versions of GnuPG which doesn’t allow ECDSA keys to be added as subkeys correctly. You’ll need a verion of GnuPG where that bug is fixed for this procedure to work.\n Adding a piv-agent OpenPGP key as a signing subkey of an existing OpenPGP key is a convenient way to integrate a hardware security device with your existing gpg workflow. This allows you to do things like sign git commits using your Yubikey, while keeping the same OpenPGP key ID. Adding a subkey requires cross-signing, so you need to export the master secret key of your existing OpenPGP key as described above to make it available to piv-agent. There are instructions for adding an existing key as a subkey here.\ngpg will choose the newest available subkey to perform an action. So it will automatically prefer a newly added piv-agent subkey over any existing keyfile subkeys, but fall back to keyfiles if e.g. the Yubikey is not plugged in.\n","categories":"","description":"","excerpt":"Start piv-agent.socket Start the agent sockets, and test:\nsystemctl …","ref":"/piv-agent/docs/use/","tags":"","title":"Use"},{"body":" PIV Agent Documentation   Download   An SSH and GPG agent providing simple integration of PIV hardware (e.g. a Yubikey) with existing SSH and GPG workflows.        ","categories":"","description":"","excerpt":" PIV Agent Documentation   Download   An SSH and GPG agent providing …","ref":"/piv-agent/","tags":"","title":"PIV Agent"},{"body":"PIV Agent must be installed and set up to work with your hardware security device before use. See below for instructions.\n","categories":"","description":"","excerpt":"PIV Agent must be installed and set up to work with your hardware …","ref":"/piv-agent/docs/","tags":"","title":"PIV Agent Documentation"}]